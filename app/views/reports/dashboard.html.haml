%h1= I18n.t('report.header')
%br
=form_tag dashboard_path(@user[:id], @user[:key]), :method => :get do
  == #{I18n.t('report.start_date')} #{text_field_tag(:start_date, I18n.l(@start_date), {:id => "start_date"})}
  == #{I18n.t('report.end_date')} #{text_field_tag(:end_date, I18n.l(@end_date), {:id => "end_date"})}
  = submit_tag I18n.t('report.update')
%br

%h2= I18n.t('report.page_view_graph_header')
#page_view_plot{:style => "width: 700px; height: 400px;"}

%h2== #{@number_of_articles_with_views} of your articles were viewed #{@total_view_count} times in total.
#source_chart{:style => "width: 400px; height: 400px;"}

%h2= I18n.t('report.articles_header')

%table#article_counts_summary
  - @article_counts[0..4].each do |ac|
    - if ac[:count] == 0
      - break
    %tr
      %td
        %a{:href => "#{ac[:permalink]}"}=ac[:title]
      %td
        =link_to "Details", article_dashboard_url(@user[:id], @user[:key], ac[:suite101_article_id], :start_date => @start_date, :end_date => @end_date)
      %td= ac[:count]

%table#article_counts_full
  - @article_counts.each do |ac|
    - if ac[:count] == 0
      - break
    %tr
      %td
        %a{:href => "#{ac[:permalink]}"}=ac[:title]
      %td
        =link_to "Details", article_dashboard_url(@user[:id], @user[:key], ac[:suite101_article_id], :start_date => @start_date, :end_date => @end_date)
      %td= ac[:count]

%a#more_article_counts{:href => "#"}

%h2= I18n.t('report.keyword_header')
%table
  - @keyphrase_counts.each do |k|
    %tr
      %td= k[0]
      %td= k[1]
      
%h2= I18n.t('report.domain_header')
%table
  - @domain_counts.each do |k|
    %tr
      %td= k[0].blank? ? "[direct]" : k[0]
      %td= k[1]

%p
  =link_to I18n.t('report.download_data'), article_view_csv_path(@user[:id], @user[:key])  

- content_for :page_javascript do
  :javascript
    $(function(){
      var article_count_toggler = $("#more_article_counts");

      function toggle_article_counts(){
        $("#article_counts_summary").toggle();
        $("#article_counts_full").toggle();
        var txt = $("#article_counts_full").is(':visible') ? 'Show most popular' : 'Show all';
        article_count_toggler.text(txt);
      };

      article_count_toggler.click(function(){
        toggle_article_counts();
        return false;
      });
      
      $("#article_counts_full").hide();
      
      if ($("#article_counts").children().children().length > ARTICLE_POSITION_TO_SHOW + 1){
        toggle_article_counts();
      } else {
        article_count_toggler.hide();
      }

      var dates = $( "#start_date, #end_date" ).datepicker({
        numberOfMonths: 1,
        minDate: new Date(2011, 1-1, 1),
        onSelect: function( selectedDate ) {
          var option = this.id == "start_date" ? "minDate" : "maxDate",
          instance = $( this ).data( "datepicker" ),
          date = $.datepicker.parseDate(
          instance.settings.dateFormat ||
          $.datepicker._defaults.dateFormat,
          selectedDate, instance.settings );
          dates.not( this ).datepicker( "option", option, date );
        }
      });
      
      $.datepicker.setDefaults($.datepicker.regional["#{I18n.locale.to_s}"]);
  		
      // Make the 'page_view_plot' div a highchart showing the total view counts.
      var view_chart;
      chart = new Highcharts.Chart({
        chart: {
          renderTo: 'page_view_plot',
          defaultSeriesType: 'line',
          marginRight: 130,
          marginBottom: 85
        },
        title: false,
        legend: {
          enabled: false
        },
        xAxis: {
          type: 'datetime',
          min: #{@start_date.at_midnight.to_i * 1000},
          startOnTick: true
        },
        yAxis: {
          title: false,
          min: 0
        },
        tooltip: {
          formatter: function() {
            return Highcharts.dateFormat("%B %e %Y", this.x) + ': ' + this.y;
          }
        },
        series: [{
          name: 'This week',
          pointInterval: #{1.day * 1000},
          pointStart: #{@start_date.at_midnight.to_i * 1000},
          data: #{@view_counts.inspect}
        }]
      });
      
      // Make the 'source_chart' div a highchart pie chart showing the source types.
      var source_chart;
      source_chart = new Highcharts.Chart({
        chart: {
           renderTo: 'source_chart',
           plotBackgroundColor: null,
           plotBorderWidth: null,
           plotShadow: false,
           marginLeft: 100,
           marginRight: 100,
           marginBottom: 50,
           marginTop: 50
        },
        title: {
           text: ''
        },
        tooltip: {
           formatter: function() {
              return '<b>'+ this.point.name +'</b>: '+ this.y;
           }
        },
        plotOptions: {
           pie: {
              allowPointSelect: true,
              cursor: 'pointer',
              dataLabels: {
                 enabled: true,
                 color: '#000000',
                 connectorColor: '#000000',
                 formatter: function() {
                    return '<b>'+ this.point.name +'</b>: '+ this.y;
                 }
              }
           }
        },
         series: [{
           type: 'pie',
           data: #{@source_counts.map{|source_sym, count| [I18n.t("report.#{source_sym.to_s}"), count]}.to_json}
        }]
     });
      
    });
  